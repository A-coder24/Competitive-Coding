5 Organizing a Lottery Problem 
Introduction You are organizing an online lottery. To participate, a person bets on a single integer. You then draw several ranges of consecutive integers at random.
A participant’s payoff then is proportional to the number of ranges that contain the participant’s number minus the number of ranges that does not contain it. 
You need an efficient algorithm for computing the payoffs for all participants. A naive way to do this is to simply scan, for all participants, the list of all ranges.
However, you lottery is very popular: you have thousands of participants and thousands of ranges. For this reason, you cannot afford a slow naive algorithm.
Problem Description Task. You are given a set of points on a line and a set of segments on a line. The goal is to compute, for each point, the number of segments that contain this point. 
Input Format. The first line contains two non-negative integers s and p defining the number of segments and the number of points on a line, respectively. 
The next s lines contain two integers ai,bi defining the i-th segment [ai,bi]. The next line contains p integers defining points x1,x2,...,xp. 
Constraints. 1 ≤ s,p ≤ 50000; −108 ≤ ai ≤ bi ≤ 108 for all 0 ≤ i < s; −108 ≤ xj ≤ 108 for all 0 ≤ j < p.
Output Format. Output p non-negative integers k0,k1,...,kp−1 where ki is the number of segments which contain xi. More formally, ki = |{j: aj ≤ xi ≤ bj}|.
Sample 1. 
Input:
2 3 
0 5 
7 10 
1 6 11 
Output: 1 0 0 
Here, we have two segments and three points. The first point lies only in the first segment while the remaining two points are outside of all the given segments.
Sample 2. 
Input: 
 1 3 
-10 10 
-100 100 0 
Output: 0 0 1
# Uses python3
import sys
import random

def fast_count_segments(starts, ends, points):
    cnt = [0] * len(points)
    LEFT = 1
    POINT = 2
    RIGHT = 3
    count=0
    a=3
    starts_l = [LEFT] * len(starts)
    ends_r = [RIGHT] * len(ends)
    points_p = [POINT] * len(points)
            
    pairs_number = points + ends + starts
    pairs_letter = points_p + ends_r + starts_l
   
    

    randomized_quick_sort(pairs_number, pairs_letter, 0, len(pairs_number) - 1)
    for i in range(1,len(pairs_number)):
        if pairs_number[i-1]==pairs_number[i]:
            count+=1
        if pairs_number[i-1]!=pairs_number[i] and count!=0:
            a=i-1-count
            randomized_quick_sort( pairs_letter,pairs_number, a,i-1)
            count=0
        if i==len(pairs_number) - 1 and count!=0:
            a=i-count
            randomized_quick_sort( pairs_letter,pairs_number, a,i)
            count=0
        
            
    count_left = 0

    point_counts = {}
    for p in points:
        point_counts[p] = 0

    for i in range(len(pairs_number)):
        if pairs_letter[i] == LEFT:
            count_left += 1
        elif pairs_letter[i] == RIGHT:
            count_left -= 1
        elif pairs_letter[i] == POINT:
            if point_counts[pairs_number[i]] == 0:
                point_counts[pairs_number[i]] += count_left

    for i in range(len(points)):
        cnt[i] = point_counts[points[i]]

    return cnt
def partition3(a,b, l, r):
    x=a[l]
    j=l
    k=l
    for i in range(l+1,r+1):
        if a[i]<x:
            j+=1

            a[i],a[j] = a[j],a[i]
            b[i],b[j] = b[j],b[i]
            if k>=j:
                k+=1
                a[i],a[k]=a[k],a[i]
                b[i],b[k] = b[k],b[i]
            else:
                k+=1

        elif a[i]==x:
            k=k+1
            a[i],a[k]=a[k],a[i]
            b[i],b[k] = b[k],b[i]
            
    a[l], a[j] = a[j], a[l] 
    b[l],b[j] = b[j],b[l]


    return [j , k]    

def randomized_quick_sort(a,b, l, r):
    m=[]
    if l >= r:
        return
    k = random.randint(l, r)
    a[l], a[k] = a[k], a[l]
    b[l],b[k] = b[k],b[l]
    #use partition3
    m = partition3(a,b, l, r)
    randomized_quick_sort(a,b, l, m[0]- 1)
    randomized_quick_sort(a,b, m[1] + 1, r)

    
    
if __name__ == '__main__':
    input = sys.stdin.read()
    data = list(map(int, input.split()))
    n = data[0]
    m = data[1]
    starts = data[2:2 * n + 2:2]
    ends   = data[3:2 * n + 2:2]
    points = data[2 * n + 2:]
    #use fast_count_segments
    cnt = fast_count_segments(starts, ends, points)
    for x in cnt:
        print(x, end=' ')  

    

