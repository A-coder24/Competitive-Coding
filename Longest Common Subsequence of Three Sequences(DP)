5 Longest Common Subsequence of Three Sequences
Problem Introduction
Compute the length of a longest common subsequence of three sequences.
Problem Description
Task. Given three sequences 𝐴 = (𝑎1, 𝑎2, . . . , 𝑎𝑛), 𝐵 = (𝑏1, 𝑏2, . . . , 𝑏𝑚), and 𝐶 = (𝑐1, 𝑐2, . . . , 𝑐𝑙), find the
length of their longest common subsequence, i.e., the largest non-negative integer 𝑝 such that there
exist indices 1 ≤ 𝑖1 < 𝑖2 < · · · < 𝑖𝑝 ≤ 𝑛, 1 ≤ 𝑗1 < 𝑗2 < · · · < 𝑗𝑝 ≤ 𝑚, 1 ≤ 𝑘1 < 𝑘2 < · · · < 𝑘𝑝 ≤ 𝑙 such
that 𝑎𝑖1 = 𝑏𝑗1 = 𝑐𝑘1
, . . . , 𝑎𝑖𝑝 = 𝑏𝑗𝑝 = 𝑐𝑘𝑝
Input Format. First line: 𝑛. Second line: 𝑎1, 𝑎2, . . . , 𝑎𝑛. Third line: 𝑚. Fourth line: 𝑏1, 𝑏2, . . . , 𝑏𝑚. Fifth line:
𝑙. Sixth line: 𝑐1, 𝑐2, . . . , 𝑐𝑙
.
Constraints. 1 ≤ 𝑛, 𝑚, 𝑙 ≤ 100; −109 < 𝑎𝑖
, 𝑏𝑖
, 𝑐𝑖 < 109
.
Output Format. Output 𝑝.
Sample 1.
Input:
3
1 2 3
3
2 1 3
3
1 3 5
Output:
2
A common subsequence of length 2 is (1, 3).
Sample 2.
Input:
5
8 3 2 1 7
7
8 2 1 3 8 10 7
6
6 8 3 1 4 7
Output:
3
One common subsequence of length 3 in this case is (8, 3, 7). Another one is (8, 1, 7).
#Uses python3

import sys

def lcs3(s, t, u):
    a=len(s)
    b=len(t)
    c=len(u)
    d={}
    count=0
    d= [[[0 for k in range(c+1)] for j in range(b+1)] 
         for k in range(a+1)]
    for k in range(1,c+1):    
        for j in range(1,b+1):
            for i in range(1,a+1):
        
                if s[i-1]==t[j-1]==u[k-1]:
                    d[i][j][k]=d[i-1][j-1][k-1]+1
                else:
                    d[i][j][k]=max(d[i][j-1][k],d[i-1][j][k],d[i][j][k-1])
           
           
    return d[a][b][c]
    

if __name__ == '__main__':
    input = sys.stdin.read()
    data = list(map(int, input.split()))
    an = data[0]
    data = data[1:]
    a = data[:an]
    data = data[an:]
    bn = data[0]
    data = data[1:]
    b = data[:bn]
    data = data[bn:]
    cn = data[0]
    data = data[1:]
    c = data[:cn]
    print(lcs3(a, b, c))
