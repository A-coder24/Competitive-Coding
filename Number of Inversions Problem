4 Number of Inversions Problem
Introduction An inversion of a sequence a0,a1,...,an−1 is a pair of indices 0 ≤ i < j < n such that ai > aj.
The number of inversions of a sequence in some sense measures how close the sequence is to being sorted.
For example, a sorted (in non-descending order) sequence contains no inversions at all,
while in a sequence sorted in descending order any two elements constitute an inversion (for a total of n(n−1)/2 inversions).

Problem Description Task. The goal in this problem is to count the number of inversions of a given sequence.
Input Format. The first line contains an integer n, the next one contains a sequence of integers a0,a1,...,an−1. 
Constraints. 1 ≤ n ≤ 105, 1 ≤ ai ≤ 109 for all 0 ≤ i < n. 
Output Format. Output the number of inversions in the sequence.
Sample 1.
Input: 5
2 3 9 2 9 
Output: 2 
The two inversions here are (1,3) (a1 = 3 > 2 = a3) and (2,3) (a2 = 9 > 2 = a3).
What To Do This problem can be solved by modifying the merge sort algorithm. 
For this, we change both the Merge and MergeSort procedures as follows: 
Merge(B, C) returns the resulting sorted array and the number of pairs (b,c) such that b ∈ B, c ∈ C, and b > c; ∙ MergeSort(A) returns a sorted array A and the number of inversions in A. 
# Uses python3
import sys

def _mergeSort(arr, temp_arr, left, right): 

	inv_count=0

	if left<right:

		mid = (left + right)//2

		inv_count += _mergeSort(arr, temp_arr, left, mid) 

		inv_count += _mergeSort(arr, temp_arr, mid + 1, right) 

		inv_count += merge(arr, temp_arr, left, mid, right) 
	return inv_count 

def merge(arr, temp_arr, left, mid, right): 
	i = left	 # Starting index of left subarray 
	j = mid + 1 # Starting index of right subarray 
	k = left	 # Starting index of to be sorted subarray 
	inv_count = 0



	while i <= mid and j <= right: 



		if arr[i] <= arr[j]: 
			temp_arr[k] = arr[i] 
			k += 1
			i += 1
		else: 
		
			temp_arr[k] = arr[j] 
			inv_count += (mid-i + 1) 
			k += 1
			j += 1

	 
	while i <= mid: 
		temp_arr[k] = arr[i] 
		k += 1
		i += 1

	while j <= right: 
		temp_arr[k] = arr[j] 
		k += 1
		j += 1
 
	for loop_var in range(left, right + 1): 
		arr[loop_var] = temp_arr[loop_var] 
		
	return inv_count 



if __name__ == '__main__':
    input = sys.stdin.read()
    n, *a = list(map(int, input.split()))
    b = n * [0]
    print(_mergeSort(a, b,0,n-1))

