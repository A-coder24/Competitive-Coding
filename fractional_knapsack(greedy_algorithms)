2 Maximum Value of the Loot Problem Introduction
A thief finds much more loot than capacity.Help him to find the most valuable combination of items assuming that any fraction of a loot item can be put into his bag.
Problem Description Task. The goal of this code problem is to implement an algorithm for the fractional knapsack problem. Input Format. 
Thefirst line of the input contains the number n ofitems and the capacity W ofaknapsack. Thenext n lines define the values and weights of the items.
The i-th line contains integers vi and wi—the value and the weight of i-th item, respectively.
 Constraints. 1 ≤ n ≤ 103, 0 ≤ W ≤ 2·106; 0 ≤ vi ≤ 2·106, 0 < wi ≤ 2·106 for all 1 ≤ i ≤ n.
 All the numbers are integers.
 Output Format. Output the maximal value of fractions of items that fit into the knapsack. The absolute value of the difference between the answer of your program and the optimal value should be at most 10−3.
 To ensure this, output your answer with at least four digits after the decimal point (otherwise your answer, while being computed correctly, can turn out to be wrong because of rounding issues).
Sample 1. Input: 3 50 60 20 100 50 120 30 
          Output: 180.0000 To achieve the value 180, we take the first item and the third item into the bag.
Sample 2. Input: 1 10 500 30  
          Output: 166.6667 Here, we just take one third of the only available item.
          
          
# Uses python3
import sys

def get_optimal_value(capacity, weights, values):
    value = 0.
    c=[]
    m={}
    for r in range (len(values)):
        if  values[r]/weights[r] not in m:
            m[values[r]/weights[r]]=0
        m[values[r]/weights[r]]=m[values[r]/weights[r]]+weights[r]
    n=sorted(m,reverse =True)
    
    for r in n:
        if capacity>=m[r] and capacity!=0:
            value=value+r*m[r]
            capacity=capacity-m[r]
            
        else:
            if capacity!=0:
                value=value+r*(capacity)
                capacity=0
        if capacity==0:
            break
    return value
    
if __name__ == "__main__":
    data = list(map(int, sys.stdin.read().split()))
    n, capacity = data[0:2]
    values = data[2:(2 * n + 2):2]
    weights = data[3:(2 * n + 2):2]
    opt_value = get_optimal_value(capacity, weights, values)
    print("{:.10f}".format(opt_value))
