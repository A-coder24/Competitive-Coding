2 Problem: Checking Consistency of CS Curriculum
Problem Introduction
A Computer Science curriculum specifies the prerequisites for each course as a list of courses that should be
taken before taking this course. You would like to perform a consistency check of the curriculum, that is,
to check that there are no cyclic dependencies. For this, you construct the following directed graph: vertices
correspond to courses, there is a directed edge (𝑢, 𝑣) is the course 𝑢 should be taken before the course 𝑣.
Then, it is enough to check whether the resulting graph contains a cycle.
Problem Description
Task. Check whether a given directed graph with 𝑛 vertices and 𝑚 edges contains a cycle.
Input Format. A graph is given in the standard format.
Constraints. 1 ≤ 𝑛 ≤ 103
, 0 ≤ 𝑚 ≤ 103
.
Output Format. Output 1 if the graph contains a cycle and 0 otherwise.
Time Limits.
language C C++ Java Python C# Haskell JavaScript Ruby Scala
time (sec) 1 1 1.5 5 1.5 2 5 5 3
Memory Limit. 512MB.
Sample 1.
Input:
4 4
1 2
4 1
2 3
3 1
Output:
1
1 2
4 3
This graph contains a cycle: 3 → 1 → 2 → 3.
Sample 2.
Input:
5 7
1 2
2 3
1 3
3 4
1 4
2 5
3 5
Output:
0
5
1 2
4 3 5
There is no cycle in this graph. This can be seen, for example, by noting that all edges in this graph
go from a vertex with a smaller number to a vertex with a larger number.
#Uses python3

import sys
def explore(y,adj,x,visited,ans):
    visited[x]=1
    for j in adj[x]:
        
        if j==y:
            ans=1
        if visited[j]  !=1:
            ans=explore(y,adj,j,visited,ans)
    return ans

def number_of_components(n,adj):
    visited=[0]*n
    p=[0]*n
    for i in range(n):
        if visited[i]==0:
           ans=explore(i,adj,i,visited,0)
           if ans ==1:
               return ans
    return ans
    

if __name__ == '__main__':
    input = sys.stdin.read()
    data = list(map(int, input.split()))
    n, m = data[0:2]
    data = data[2:]
    edges = list(zip(data[0:(2 * m):2], data[1:(2 * m):2]))
    adj = [[] for _ in range(n)]
    for (a, b) in edges:
        adj[a - 1].append(b - 1)
    print(number_of_components(n,adj))
